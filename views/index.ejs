<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>File Uploader</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/2.9.4/umd/popper.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.min.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.3.0/css/all.min.css" rel="stylesheet">
</head>
<body>
    <div class="container">
        <h1 class="mt-5 text-primary">File Uploader</h1>

        <h2 class="mt-4">Upload File</h2>
        <form action="/upload" method="POST" enctype="multipart/form-data" onsubmit="handleUpload(event)">
            <div class="mb-3">
                <input type="file" name="file" class="form-control" required>
            </div>
            <button type="submit" class="btn btn-success">Upload</button>
        </form>

        <h2 class="mt-4">Delete File</h2>
        <form id="deleteForm">
            <div class="mb-3">
                <select id="fileSelect" name="fileName" class="form-select">
                </select>
            </div>
            <button type="button" class="btn btn-danger" onclick="deleteFile()">Delete</button>
        </form>

        <h2 class="mt-4">Uploaded Files</h2>
        <ul id="fileList" class="list-group"></ul>
    </div>

    <script>
        // Fetch and populate file list with dynamic icons
        function populateFileListWithIcons() {
            fetch('/view')
                .then(response => response.json())
                .then(data => {
                    const fileList = document.getElementById('fileList');
                    fileList.innerHTML = '';

                    data.files.forEach(fileName => {
                        const listItem = document.createElement('li');
                        listItem.className = 'list-group-item d-flex justify-content-between align-items-center';

                        const fileExtension = fileName.split('.').pop();

                        const iconSpan = document.createElement('span');
                        iconSpan.className = 'me-3';
                        iconSpan.innerHTML = getFileIconHTML(fileExtension);

                        const fileLink = document.createElement('a');
                        fileLink.href = `/uploads/${fileName}`;
                        fileLink.textContent = fileName;
                        fileLink.target = "_blank";

                        listItem.appendChild(iconSpan);
                        listItem.appendChild(fileLink);

                        fileList.appendChild(listItem);
                    });
                })
                .catch(error => console.error("Error loading file list:", error));
        }

        // Icon generator for various file types
        function getFileIconHTML(fileExtension) {
            const iconClasses = {
                pdf: 'far fa-file-pdf text-danger',
                doc: 'far fa-file-word text-primary',
                docx: 'far fa-file-word text-primary',
                xls: 'far fa-file-excel text-success',
                xlsx: 'far fa-file-excel text-success',
                ppt: 'far fa-file-powerpoint text-warning',
                pptx: 'far fa-file-powerpoint text-warning',
                txt: 'far fa-file-alt text-muted',
                jpg: 'far fa-file-image text-info',
                jpeg: 'far fa-file-image text-info',
                png: 'far fa-file-image text-info',
                gif: 'far fa-file-image text-info',
                default: 'far fa-file text-secondary'
            };

            return `<i class="${iconClasses[fileExtension.toLowerCase()] || iconClasses['default']}"></i>`;
        }

        // Handle file deletion
        function deleteFile() {
            const deleteForm = document.getElementById('deleteForm');
            const formData = new FormData(deleteForm);

            fetch(`/delete/${formData.get('fileName')}`, {
                method: 'DELETE',
            })
                .then(response => response.text())
                .then(message => {
                    alert(message);
                    populateFileListWithIcons();
                    populateDeleteOptions();
                })
                .catch(error => console.error("Error deleting file:", error));
        }

        // Populate dropdown options for file deletion
        function populateDeleteOptions() {
            fetch('/view')
                .then(response => response.json())
                .then(data => {
                    const fileSelect = document.getElementById('fileSelect');
                    fileSelect.innerHTML = '';
                    data.files.forEach(fileName => {
                        const option = document.createElement('option');
                        option.value = fileName;
                        option.textContent = fileName;
                        fileSelect.appendChild(option);
                    });
                })
                .catch(error => console.error("Error loading delete options:", error));
        }

        // Handle file upload with confirmation
        function handleUpload(event) {
            event.preventDefault();
            const form = event.target;

            fetch(form.action, {
                method: form.method,
                body: new FormData(form),
            })
                .then(response => response.text())
                .then(message => {
                    alert(message);
                    form.reset();
                    populateFileListWithIcons();
                    populateDeleteOptions();
                })
                .catch(error => console.error("Error uploading file:", error));
        }

        populateFileListWithIcons();
        populateDeleteOptions();
    </script>
</body>
</html>
